%
%   XTDistanceTransformOutsideObjectForBatchFirst2surfaces 
%
%
%   Installation:
%
%  -For this XTension to work:
%  
%   1)	Create a new Folder for “batchable” XTensions
%       a.	c:/Program Files/Bitplane/BatchXTensions
%       b.	This folder can be made anywhere, but should be in public folder
%   2)	Download XTBatchProcess.m to this folder
%   3)	Download XTDistanceTransformOutsideObjectForBatchFirst2surfaces.m to this folder
%   4)  Create a new folder that will contain the processed Imaris files and exported
%       statistics that are generated by this Xtension
%       a. g:/BitplaneBatchOutput
%       b. A folder titled BitplaneBatchOutput can be made anywhere just
%       change line 155 of this script to reflect its location.
%   5)	Start Imaris and Click menu tab FIJI>>OPTIONS
%       a.	Add the BatchXTensions folder to the XTension folder window
%       b.	This is necessary for the batch process option to appear in Imaris menu
%  
%
%   NOTE: This XTension will NOT appear in the Imaris menus, and will only appear 
%   in conjunction with the running of the XTBatchProcess XTension
%   
%   NOTE:  This XTension is developed for working on Windows based machines only.
%   If you want to use it on MacOS, you will have to edit the .m file save location
%   to fit Mac standards. 
%

function XTDistanceTransformOutsideObjectForBatchFirst2surfaces(aImarisApplicationID)

% connect to Imaris interface
if ~isa(aImarisApplicationID, 'Imaris.IApplicationPrxHelper')
  javaaddpath ImarisLib.jar
  vImarisLib = ImarisLib;
  if ischar(aImarisApplicationID)
    aImarisApplicationID = round(str2double(aImarisApplicationID));
  end
  vImarisApplication = vImarisLib.GetApplication(aImarisApplicationID);
else
  vImarisApplication = aImarisApplicationID;
end

import java.util.Properties;
import java.io.FileReader;

% Finds out where the current m file is
baseFolder = fileparts(which(mfilename));

% Reads the property file from the same directory of the m file
propertyFilename = fullfile(baseFolder,'chrysalis.properties');
p = Properties; 
p.load(FileReader(propertyFilename)); 

% Read the property
outputPath = p.getProperty('outputPath');

vImarisDataSet = vImarisApplication.GetDataSet.Clone;

%Convert dataset to 32bit float
vFloatType = vImarisDataSet.GetType.eTypeFloat;
vImarisDataSet.SetType(vFloatType);

% the user has to create a scene with some surfaces
vSurpassScene = vImarisApplication.GetSurpassScene;
if isequal(vSurpassScene, [])
  %msgbox('Please create some Surfaces in the Surpass scene!');
  return;
end

todo=[]; N=2;

% get the Surfaces
    vSurfaces = vImarisApplication.GetFactory.ToSurfaces(vImarisApplication.GetSurpassSelection);
% search the surfaces if not previously selected
if ~vImarisApplication.GetFactory.IsSurfaces(vSurfaces)        
    for vChildIndex = 1:vSurpassScene.GetNumberOfChildren
        vDataItemSurface = vSurpassScene.GetChild(vChildIndex - 1);
        if vImarisApplication.GetFactory.IsSurfaces(vDataItemSurface)
            vSurfaces = vImarisApplication.GetFactory.ToSurfaces(vDataItemSurface);
            vDataItemSurface=vChildIndex;
            
            todo=[todo vSurfaces];
            if length(todo)==2
                break;
            end
        end
    end
end
if isempty(vSurfaces)
   vDataItemSurface=1618; 
end

vProgressDisplay = waitbar(0, 'Distance Transform: Preparation');
for vSurfaces_i=1:length(todo)
    vSurfaces = todo(vSurfaces_i);

    vImarisApplication.DataSetPushUndo('Distance Transform');

    vDataMin = [vImarisDataSet.GetExtendMinX, vImarisDataSet.GetExtendMinY, vImarisDataSet.GetExtendMinZ];
    vDataMax = [vImarisDataSet.GetExtendMaxX, vImarisDataSet.GetExtendMaxY, vImarisDataSet.GetExtendMaxZ];
    vDataSize = [vImarisDataSet.GetSizeX, vImarisDataSet.GetSizeY, vImarisDataSet.GetSizeZ];

    %If there are not surface or spot objects, Stop the XTension on this file
    if vDataItemSurface==1618
        return;
    end
    %Identify if the Distance Transform will process on Spots or Surface object
    %Script chooses the first Spot or Surface object in the Surpass Scene
        vImarisObject = vImarisApplication.GetFactory.ToSurfaces(vSurfaces);
        vSelection=2;

    % Create a new channel where the result will be sent
    vNumberOfChannels = vImarisDataSet.GetSizeC;
    vImarisDataSet.SetSizeC(vNumberOfChannels + 1);
    vImarisDataSet.SetChannelName(vNumberOfChannels,['Distance to ', char(vImarisObject.GetName)]);
    vImarisDataSet.SetChannelColorRGBA(vNumberOfChannels, 255*256*256);
    aSizeX = vImarisDataSet.GetSizeX;
    aSizeY = vImarisDataSet.GetSizeY;
    vSizeT = vImarisDataSet.GetSizeT;

    for vTime = 0:vSizeT-1;
        % Get the mask DataSet
        vMaskDataSet = vImarisObject.GetMask( ...
          vDataMin(1), vDataMin(2), vDataMin(3), ...
          vDataMax(1), vDataMax(2), vDataMax(3), ...
          vDataSize(1), vDataSize(2), vDataSize(3), vTime);
        
         for vIndexZ = 1:vDataSize(3)
          vSlice=vMaskDataSet.GetDataSubVolumeAs1DArrayBytes(0,0,vIndexZ-1,0,0,aSizeX,aSizeY,1);
          vSlice = vSlice == 1;
          vImarisDataSet.SetDataSubVolumeAs1DArrayFloats(single(vSlice), ...
            0,0,vIndexZ-1,vNumberOfChannels,vTime,aSizeX,aSizeY,1);
          waitbar((vTime+(vIndexZ/vDataSize(3)))/vSizeT/2, vProgressDisplay);
        end
    end

    waitbar(0.5, vProgressDisplay, 'Distance Transform: Calculation');
    vImarisApplication.GetImageProcessing.DistanceTransformChannel( ...
      vImarisDataSet, vNumberOfChannels, 1, false);
    waitbar(1, vProgressDisplay);
end

vImarisApplication.SetDataSet(vImarisDataSet);

%%
% The following MATLAB code returns the name of the dataset opened in 
% Imaris and saves file as IMS (Imaris5) format
vFileNameString = vImarisApplication.GetCurrentFileName; % returns ‘C:/Imaris/Images/retina.ims’
vFileName = char(vFileNameString);
[vOldFolder, vName, vExt] = fileparts(vFileName); % returns [‘C:/Imaris/Images/’, ‘retina’, ‘.ims’]
vNewFileName = fullfile('outputPath', [vName, vExt]); % returns ‘c:/BitplaneBatchOutput/retina.ims’
vImarisApplication.FileSave(vNewFileName, '');

%%

close(vProgressDisplay);


